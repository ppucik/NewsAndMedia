// <auto-generated />
using System;
using ASPNETCoreWebAPI.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASPNETCoreWebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240606124638_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("Title");

                    b.ToTable("Article", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2024, 6, 6, 12, 46, 37, 965, DateTimeKind.Utc).AddTicks(592),
                            SiteId = 1L,
                            Title = "Zadanie .NET Senior Developer"
                        });
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Author", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2024, 6, 6, 12, 46, 37, 965, DateTimeKind.Utc).AddTicks(592),
                            Name = "Peter Púčik"
                        });
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.AuthorArticle", b =>
                {
                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.HasKey("ArticleId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorArticles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1L,
                            AuthorId = 1L
                        });
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorId = 1L,
                            Created = new DateTime(2024, 6, 6, 12, 46, 37, 965, DateTimeKind.Utc).AddTicks(592),
                            Description = "Popis obrázku"
                        });
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Site", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Site", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2024, 6, 6, 12, 46, 37, 965, DateTimeKind.Utc).AddTicks(592),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 6, 12, 46, 37, 965, DateTimeKind.Unspecified).AddTicks(592), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Article", b =>
                {
                    b.HasOne("ASPNETCoreWebAPI.Entities.Site", "Site")
                        .WithMany("Articles")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.AuthorArticle", b =>
                {
                    b.HasOne("ASPNETCoreWebAPI.Entities.Article", "Article")
                        .WithMany("AuthorArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPNETCoreWebAPI.Entities.Author", "Author")
                        .WithMany("AuthorArticles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Image", b =>
                {
                    b.HasOne("ASPNETCoreWebAPI.Entities.Author", "Author")
                        .WithOne("Image")
                        .HasForeignKey("ASPNETCoreWebAPI.Entities.Image", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Article", b =>
                {
                    b.Navigation("AuthorArticles");
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Author", b =>
                {
                    b.Navigation("AuthorArticles");

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("ASPNETCoreWebAPI.Entities.Site", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
